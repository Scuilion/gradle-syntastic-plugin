buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.0"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.2"
}

apply plugin: "com.gradle.plugin-publish"
apply plugin: 'java-gradle-plugin'

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

apply from: 'check.gradle'
apply from: 'publishPlugin.gradle'

repositories {
    mavenCentral()
}
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}


dependencies {
    compile localGroovy()
    compile 'org.apache.commons:commons-lang3:3.4'

    testRuntime files(createClasspathManifest)
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.3'
    testCompile 'junit:junit:4.12'
    testCompile gradleTestKit()
}

task sourceJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourceJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId group
            artifactId artifactId
            version version
            from components.java
            artifact sourceJar
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    integrationTestCompile.extendsFrom compile
    integrationTestRuntime.extendsFrom runtime
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/integrationTest/groovy'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
    }
}

task integrationTest(type:Test){
    dependsOn publishToMavenLocal
    dependsOn integrationTestClasses

    systemProperties['integrationTest.location'] = new File(sourceSets.integrationTest.output.resourcesDir, 'pluginTest').absolutePath
    systemProperties['version'] = version

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath + sourceSets.main.output

    getReports().getHtml().setDestination(new File("$project.reporting.baseDir", 'integrationTest'))
    getReports().getJunitXml().setDestination(new File("$project.buildDir", 'integration-results'))
    dependsOn publishToMavenLocal
    mustRunAfter test
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}
apply from: 'bintray.gradle'

integrationTest {
  testLogging.showStandardStreams = true
}

//apply plugin: 'syntastic-plugin'
